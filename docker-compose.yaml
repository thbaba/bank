x-net-base: &net-base
  networks:
    - dcbank-net

x-actuator-healthcheck-base: &actutator-healthcheck-base
  healthcheck:
    test: "curl --fail --silent localhost/actuator/health/readiness | grep UP || exit 1"
    interval: 2s
    retries: 30
    start_period: 2s
    timeout: 3m

services:
  accounts:
    <<: *net-base
    build:
      context: ./accounts
    container_name: accounts-ms
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_R2DBC_URL: "r2dbc:postgresql://accounts-postgres:5432/accounts_db"
      SPRING_FLYWAY_URL: "jdbc:postgresql://accounts-postgres:5432/accounts_db"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver-ms"
    depends_on:
      accounts-postgres:
        condition: service_healthy
      configserver:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
  accounts-postgres:
    <<: *net-base
    image: "postgres:17-alpine"
    container_name: accounts-postgres
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "accounts_db"
    healthcheck:
      test: "pg_isready -d accounts_db"
      interval: 2s
      retries: 30
      start_period: 2s
      timeout: 2m
  cards:
    <<: *net-base
    build:
      context: ./cards
    container_name: cards-ms
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_R2DBC_URL: "r2dbc:postgresql://cards-postgres:5432/cards_db"
      SPRING_FLYWAY_URL: "jdbc:postgresql://cards-postgres:5432/cards_db"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver-ms"
    depends_on:
      cards-postgres:
        condition: service_healthy
      configserver:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
  cards-postgres:
    <<: *net-base
    image: "postgres:17-alpine"
    container_name: cards-postgres
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "cards_db"
    healthcheck:
      test: "pg_isready -d cards_db"
      interval: 2s
      retries: 30
      start_period: 2s
      timeout: 2m
  configserver:
    <<: [*net-base, *actutator-healthcheck-base]
    build:
      context: ./configserver
    container_name: configserver-ms
    ports:
      - '3002:80'
  discoveryserver:
    <<: [*net-base, *actutator-healthcheck-base]
    build:
      context: ./discoveryserver
    container_name: discoveryserver-ms
    environment:
      SPRING_APPLICATION_NAME: "discoveryserver"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver-ms"
    depends_on:
      configserver:
        condition: service_healthy
  gatewayserver:
    <<: *net-base
    build:
      context: ./gatewayserver
    container_name: gatewayserver-ms
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver-ms"
    depends_on:
      configserver:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
    ports:
      - "80:80"

  account-publisher:
    <<: *net-base
    build: ./accounts-publisher
    container_name: account-publisher
    hostname: account-publisher
    environment:
      SPRING_APPLICATION_NAME: "accountspublisher"
      SPRING_R2DBC_URL: "r2dbc:postgresql://accounts-postgres:5432/accounts_db"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver-ms"
    depends_on:
      accounts-postgres:
        condition: service_healthy
      configserver:
        condition: service_healthy
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started

  kafka1:
    <<: *net-base
    image: "apache/kafka:4.0.0"
    hostname: kafka1
    container_name: kafka1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      CLUSTER_ID: "EmptNWtoR4GGWx-BH6nGLQ"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 3

  kafka2:
    <<: *net-base
    image: "apache/kafka:4.0.0"
    hostname: kafka2
    container_name: kafka2
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_BROKER_ID: 2
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      CLUSTER_ID: "EmptNWtoR4GGWx-BH6nGLQ"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 3

  kafka3:
    <<: *net-base
    image: "apache/kafka:4.0.0"
    hostname: kafka3
    container_name: kafka3
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_BROKER_ID: 3
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka3:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      CLUSTER_ID: "EmptNWtoR4GGWx-BH6nGLQ"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 3

  kafka-ui:
    <<: *net-base
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-cluster-ui
    ports:
      - "3000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092,kafka3:9092
    depends_on:
      - kafka1
      - kafka2
      - kafka3

networks:
  dcbank-net:
    driver: bridge
